{% extends 'posts/base.html' %}
{% load static %}
{% load custom_filters %}
{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <!-- Post Content -->
            <article class="blog-post">
                {% if post.image %}
                <img src="{{ post.image.url }}" class="img-fluid rounded mb-4" alt="{{ post.title }}">
                {% endif %}
                
                <h1 class="blog-post-title">{{ post.title }}</h1>
                
                <div class="blog-post-meta mb-3">
                    <span class="me-3">
                        <i class="bi bi-person-fill"></i> {{ post.author.get_full_name|default:post.author.username }}
                    </span>
                    <span class="me-3">
                        <i class="bi bi-calendar-fill"></i> {{ post.published_date|date:"F d, Y" }}
                    </span>
                    <span class="me-3">
                        <i class="bi bi-eye-fill"></i> {{ post.views }} Views
                    </span>
                </div>

                <!-- Reactions Section -->
                <div class="reactions mb-3">
                    <div class="btn-group" role="group" aria-label="Post Reactions">
                        {% for reaction_type, label in post.reactions.model.REACTION_CHOICES %}
                        <button type="button" 
                                class="btn btn-outline-secondary reaction-btn {% if user_reaction and user_reaction.reaction_type == reaction_type %}active{% endif %}" 
                                data-reaction="{{ reaction_type }}"
                                data-slug="{{ post.slug }}">
                            <i class="bi bi-emoji-{{ reaction_type }}"></i> 
                            <span class="reaction-count" data-count-type="{{ reaction_type }}">
                                {{ reaction_counts|get_item:reaction_type }}
                            </span>
                        </button>
                        {% endfor %}
                    </div>

                    <!-- Bookmark Button -->
                    <button class="btn btn-outline-secondary bookmark-btn ms-2" 
                            data-slug="{{ post.slug }}">
                        <i class="bi bi-bookmark{% if not user.is_authenticated or not post.bookmarked_by.exists %}-plus{% endif %}"></i>
                        <span class="bookmark-count">
                            {{ post.bookmarked_by.count }}
                        </span>
                    </button>
                </div>

                <!-- Post Content -->
                <div class="blog-post-content">
                    {{ post.content|safe }}
                </div>

                <!-- Comments Section -->
                <div class="comments-section mt-4">
                    <h3>Comments 
                        <span id="comment-count">{{ post.comments.count }}</span>
                    </h3>

                    <!-- Comment Form -->
                    <form id="comment-form" class="mb-4">
                        {% csrf_token %}
                        <div class="form-floating mb-3">
                            <textarea class="form-control" placeholder="Leave a comment" 
                                      id="comment-input" 
                                      name="comment" 
                                      required></textarea>
                            <label for="comment-input">Your Comment</label>
                            <input type="hidden" id="parent-comment-id" name="parent_id" value="">
                        </div>
                        <button type="submit" class="btn btn-primary">Post Comment</button>
                    </form>

                    <!-- Comments List -->
                    <div id="comments-list">
                        {% for comment in comments %}
                        <div class="comment mb-3 p-3 border rounded" 
                             data-comment-id="{{ comment.id }}">
                            <div class="comment-header d-flex justify-content-between">
                                <strong>{{ comment.name }}</strong>
                                <small class="text-muted">
                                    {{ comment.created_at|date:"F d, Y \a\t H:i" }}
                                </small>
                            </div>
                            <p>{{ comment.comment }}</p>
                            <button class="btn btn-sm btn-outline-secondary reply-btn" 
                                    data-parent-id="{{ comment.id }}">
                                <i class="bi bi-reply"></i> Reply
                            </button>

                            <!-- Nested Replies -->
                            {% for reply in comment.replies.all %}
                            <div class="comment reply ms-4 mt-2 p-2 border-start">
                                <div class="comment-header d-flex justify-content-between">
                                    <strong>{{ reply.name }}</strong>
                                    <small class="text-muted">
                                        {{ reply.created_at|date:"F d, Y \a\t H:i" }}
                                    </small>
                                </div>
                                <p>{{ reply.comment }}</p>
                            </div>
                            {% endfor %}
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </article>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;
    const slug = '{{ post.slug }}';

    // Reaction Handler
    document.querySelectorAll('.reaction-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            if (!{{ user.is_authenticated|yesno:"true,false" }}) {
                alert('Please log in to react to this post.');
                return;
            }

            const reactionType = this.dataset.reaction;
            fetch(`/posts/${slug}/react/${reactionType}/`, {
                method: 'GET',
                headers: {
                    'X-CSRFToken': csrfToken,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                // Update reaction counts
                Object.keys(data.reaction_counts).forEach(rt => {
                    const countEl = document.querySelector(`[data-count-type="${rt}"]`);
                    if (countEl) countEl.textContent = data.reaction_counts[rt];
                });

                // Toggle active state
                document.querySelectorAll('.reaction-btn').forEach(b => b.classList.remove('active'));
                if (data.status !== 'removed') {
                    this.classList.add('active');
                }
            });
        });
    });

    // Bookmark Handler
    document.querySelector('.bookmark-btn').addEventListener('click', function() {
        if (!{{ user.is_authenticated|yesno:"true,false" }}) {
            alert('Please log in to bookmark this post.');
            return;
        }

        fetch(`/posts/${slug}/bookmark/`, {
            method: 'GET',
            headers: {
                'X-CSRFToken': csrfToken,
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            const bookmarkIcon = this.querySelector('i');
            const bookmarkCount = this.querySelector('.bookmark-count');
            
            if (data.status === 'added') {
                bookmarkIcon.classList.remove('bi-bookmark-plus');
                bookmarkIcon.classList.add('bi-bookmark');
            } else {
                bookmarkIcon.classList.remove('bi-bookmark');
                bookmarkIcon.classList.add('bi-bookmark-plus');
            }
            bookmarkCount.textContent = data.bookmark_count;
        });
    });

    // Comment Submission Handler
    document.getElementById('comment-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!{{ user.is_authenticated|yesno:"true,false" }}) {
            alert('Please log in to comment.');
            return;
        }

        const formData = new FormData(this);
        fetch(`/posts/${slug}/comment/add/`, {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': csrfToken
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                const commentsList = document.getElementById('comments-list');
                const newComment = document.createElement('div');
                newComment.classList.add('comment', 'mb-3', 'p-3', 'border', 'rounded');
                newComment.dataset.commentId = data.comment.id;
                
                newComment.innerHTML = `
                    <div class="comment-header d-flex justify-content-between">
                        <strong>${data.comment.name}</strong>
                        <small class="text-muted">${data.comment.created_at}</small>
                    </div>
                    <p>${data.comment.comment}</p>
                    <button class="btn btn-sm btn-outline-secondary reply-btn" 
                            data-parent-id="${data.comment.id}">
                        <i class="bi bi-reply"></i> Reply
                    </button>
                `;

                // If it's a reply, append to parent comment
                if (data.comment.parent_id) {
                    const parentComment = document.querySelector(`[data-comment-id="${data.comment.parent_id}"]`);
                    if (parentComment) {
                        const replyContainer = document.createElement('div');
                        replyContainer.classList.add('comment', 'reply', 'ms-4', 'mt-2', 'p-2', 'border-start');
                        replyContainer.innerHTML = newComment.innerHTML;
                        parentComment.appendChild(replyContainer);
                    }
                } else {
                    commentsList.prepend(newComment);
                }

                // Reset form
                this.reset();
                document.getElementById('parent-comment-id').value = '';

                // Update comment count
                const commentCount = document.getElementById('comment-count');
                commentCount.textContent = parseInt(commentCount.textContent) + 1;

                // Attach reply button event listeners
                attachReplyListeners();
            }
        });
    });

    // Reply Button Handler
    function attachReplyListeners() {
        document.querySelectorAll('.reply-btn').forEach(btn => {
            btn.removeEventListener('click', replyHandler); // Remove previous listeners
            btn.addEventListener('click', replyHandler);
        });
    }

    function replyHandler(e) {
        const parentId = this.dataset.parentId;
        const commentForm = document.getElementById('comment-form');
        const parentCommentEl = this.closest('.comment');

        // Set parent comment ID in hidden input
        document.getElementById('parent-comment-id').value = parentId;

        // Focus on comment input
        const commentInput = document.getElementById('comment-input');
        commentInput.focus();

        // Optional: Scroll to comment form
        commentForm.scrollIntoView({ behavior: 'smooth' });

        // Optional: Add visual indication of reply context
        const commentName = parentCommentEl.querySelector('strong').textContent;
        commentInput.placeholder = `Replying to ${commentName}...`;
    }

    // Initial attachment of reply listeners
    attachReplyListeners();
});
</script>
{% endblock %}